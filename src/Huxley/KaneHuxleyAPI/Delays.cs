// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace KaneHuxleyAPI
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using Models;

    /// <summary>
    /// Delays operations.
    /// </summary>
    public partial class Delays : IServiceOperations<KaneHuxleyAPIClient>, IDelays
    {
        /// <summary>
        /// Initializes a new instance of the Delays class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        public Delays(KaneHuxleyAPIClient client)
        {
            if (client == null) 
            {
                throw new ArgumentNullException("client");
            }
            this.Client = client;
        }

        /// <summary>
        /// Gets a reference to the KaneHuxleyAPIClient
        /// </summary>
        public KaneHuxleyAPIClient Client { get; private set; }

        /// <param name='crs'>
        /// </param>
        /// <param name='filtertype'>
        /// </param>
        /// <param name='filtercrs'>
        /// </param>
        /// <param name='numrows'>
        /// </param>
        /// <param name='board'>
        /// </param>
        /// <param name='crs1'>
        /// </param>
        /// <param name='filtertype1'>
        /// </param>
        /// <param name='filtercrs1'>
        /// </param>
        /// <param name='numrows1'>
        /// </param>
        /// <param name='std'>
        /// </param>
        /// <param name='expand'>
        /// </param>
        /// <param name='accesstoken'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<DelaysResponse>> GetBycrsfiltertypefiltercrsnumrowsboardcrsfiltertypefiltercrsnumrowsstdexpandaccesstokenWithHttpMessagesAsync(string crs, string filtertype, string filtercrs, string numrows, int? board = default(int?), string crs1 = default(string), int? filtertype1 = default(int?), string filtercrs1 = default(string), int? numrows1 = default(int?), string std = default(string), bool? expand = default(bool?), string accesstoken = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (crs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "crs");
            }
            if (filtertype == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "filtertype");
            }
            if (filtercrs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "filtercrs");
            }
            if (numrows == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "numrows");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("crs", crs);
                tracingParameters.Add("filtertype", filtertype);
                tracingParameters.Add("filtercrs", filtercrs);
                tracingParameters.Add("numrows", numrows);
                tracingParameters.Add("board", board);
                tracingParameters.Add("crs1", crs1);
                tracingParameters.Add("filtertype1", filtertype1);
                tracingParameters.Add("filtercrs1", filtercrs1);
                tracingParameters.Add("numrows1", numrows1);
                tracingParameters.Add("std", std);
                tracingParameters.Add("expand", expand);
                tracingParameters.Add("accesstoken", accesstoken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetBycrsfiltertypefiltercrsnumrowsboardcrsfiltertypefiltercrsnumrowsstdexpandaccesstoken", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.Client.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "delays/{Crs}/{FilterType}/{FilterCrs}/{NumRows}/{Std}").ToString();
            List<string> _queryParameters = new List<string>();
            if (crs != null)
            {
                _queryParameters.Add(string.Format("crs={0}", Uri.EscapeDataString(crs)));
            }
            if (filtertype != null)
            {
                _queryParameters.Add(string.Format("filtertype={0}", Uri.EscapeDataString(filtertype)));
            }
            if (filtercrs != null)
            {
                _queryParameters.Add(string.Format("filtercrs={0}", Uri.EscapeDataString(filtercrs)));
            }
            if (numrows != null)
            {
                _queryParameters.Add(string.Format("numrows={0}", Uri.EscapeDataString(numrows)));
            }
            if (board != null)
            {
                _queryParameters.Add(string.Format("board={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(board, this.Client.SerializationSettings).Trim('"'))));
            }
            if (crs1 != null)
            {
                _queryParameters.Add(string.Format("crs={0}", Uri.EscapeDataString(crs1)));
            }
            if (filtertype1 != null)
            {
                _queryParameters.Add(string.Format("filtertype={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(filtertype1, this.Client.SerializationSettings).Trim('"'))));
            }
            if (filtercrs1 != null)
            {
                _queryParameters.Add(string.Format("filtercrs={0}", Uri.EscapeDataString(filtercrs1)));
            }
            if (numrows1 != null)
            {
                _queryParameters.Add(string.Format("numrows={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(numrows1, this.Client.SerializationSettings).Trim('"'))));
            }
            if (std != null)
            {
                _queryParameters.Add(string.Format("std={0}", Uri.EscapeDataString(std)));
            }
            if (expand != null)
            {
                _queryParameters.Add(string.Format("expand={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(expand, this.Client.SerializationSettings).Trim('"'))));
            }
            if (accesstoken != null)
            {
                _queryParameters.Add(string.Format("accesstoken={0}", Uri.EscapeDataString(accesstoken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<DelaysResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<DelaysResponse>(_responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
